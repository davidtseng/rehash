.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Utility 3"
.TH Utility 3 "2020-06-20" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Slash::Utility \- Generic Perl routines for Slash
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Slash::Utility;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Slash::Utility::Xyz classes all \s-1EXPORT\s0 their own functions.  For
example, 'package main; use Slash::Utility::Environment;' will allow
\&\fBSlash::Utility::Environment::getCurrentStatic()\fR to be called as
\&\fBmain::getCurrentStatic()\fR, effectively making it a global function.
.PP
And unlike what some might consider \*(L"best practices,\*(R" Slash exports
quite a few functions, over 170 at current count.  Since Slash is an
application, not a library, we consider this to be best.  We find
	if (isAnon($comment\->{uid}))
more readable than
	if (Slash::Utility::Environment::isAnon($comment\->{uid}))
and it seems appropriate to us.
.PP
So, 'use Slash::Utility;' is nothing but a convenient way to import
_all_ the Slash::Utility::Xyz functions into the 'use'rs namespace.
.PP
These functions are safe to call either within mod_perl/Apache or not.
.PP
Note that 'use Slash;' will pull in a few of the most commonly used
functions such as \fBgetCurrentStatic()\fR, so if your code is simple,
maybe you won't need to specify 'use Slash::Utility;'.
.PP
(Query to pudge:  would it make sense to you to push the \f(CW@EXPORT\fR
groupings up from Slash::Utility to Slash and just eliminate
Slash::Utility altogether?  I don't much care either way. \-Jamie)
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Unless otherwise noted, they are publically available functions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSlash\fR\|(3).
