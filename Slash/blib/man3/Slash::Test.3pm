.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test 3"
.TH Test 3 "2020-06-20" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Slash::Test \- Command\-line Slash testing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        % perl \-MSlash::Test \-e \*(Aqprint Dumper $user\*(Aq
\&
\&
\&        # virtualuser is assumed to be "slash" if not specified
\&        % perl \-MSlash::Test=virtualuser \-e \*(Aqprint Dumper $user\*(Aq
\&
\&
\&        # use freely in test scripts
\&        #!/usr/bin/perl \-w
\&        use Slash::Test qw(virtualuser);
\&        print Dumper $user;
\&
\&
\&        # Display, Test by template name
\&        % perl \-MSlash::Test \-we \*(AqDisplay("motd;misc;default")\*(Aq
\&        % perl \-MSlash::Test \-we \*(AqTest("motd;misc;default")\*(Aq
\&
\&
\&        # Display, Test by filename
\&        % cat motd\e;misc\e;default | perl \-MSlash::Test \-weDisplay
\&        % cat motd\e;misc\e;default | perl \-MSlash::Test \-weTest
\&
\&
\&        # Display, Test by template text
\&        % perl \-MSlash::Test \-we Display
\&        Current user is [% user.nickname %] ([% user.uid %])
\&        ^DCurrent user is Anonymous Coward (1)
\&
\&        % perl \-MSlash::Test \-we Test
\&        Current user is [% user.nickname %] ([% user.uid ; END %])
\&        ^DError in library:Slash::Test:.../Test.pm:216:anon : file error \-
\&        parse error: anon_1 line 1: unexpected token (END)
\&          [% user.uid ; END %]
\&
\&        Which was called by:main:\-e:1:anon : file error \- parse error:
\&        anon_1 line 1: unexpected token (END)
\&          [% user.uid ; END %]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Will export everything from Slash, Slash::Utility, Slash::Display,
Slash::Constants, Slash::XML, and Data::Dumper into the current namespace.
Will export \f(CW$user\fR, \f(CW$anon\fR, \f(CW$form\fR, \f(CW$constants\fR, \f(CW$slashdb\fR, and \f(CW$gSkin\fR as global
variables into the current namespace, along with a few other useful
variables: \f(CW$self\fR (alias to \f(CW$slashdb\fR), \f(CW$reader_db\fR, \f(CW$log_db\fR, \f(CW$writer_db\fR,
and \f(CW$search_db\fR.
.PP
Also the name of each plugin will be a global variable referencing its
object (e.g., \f(CW$journal\fR is automatically created as a Slash::Journal
object).
.PP
So use it one of three ways (use the default Virtual User,
or pass it in via the import list, or pass in with \fBslashTest()\fR), and then
just use the Slash \s-1API\s0 in your one-liners.
.PP
It is recommended that you change the hardcoded default to whatever
Virtual User you use most.
.PP
You can also pass in a \s-1UID\s0 to use instead of anonymous coward:
.PP
.Vb 1
\&        % perl \-MSlash::Test=virtualuser,2 \-e \*(Aqprint Dumper $user\*(Aq
.Ve
.PP
Plugin variables automatically spring into existence, such as \f(CW$journal\fR, \f(CW$messages\fR,
etc.  Feel free to do:
.PP
.Vb 1
\&        % perl \-MSlash::Test \-e \*(Aqprint Dumper $journal\->themes\*(Aq
.Ve
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "slashTest([\s-1VIRTUALUSER\s0])"
.IX Subsection "slashTest([VIRTUALUSER])"
Set up the environment, with a new Virtual User.
.PP
Called automatically when module is first used.  Should only be called
if changing the Virtual User from the default (by default, \*(L"slash\*(R").
Called without an argument, uses the default.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1VIRTUALUSER\s0" 4
.IX Item "VIRTUALUSER"
.PD
Your site's virtual user.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
None.
.IP "Side effects" 4
.IX Item "Side effects"
Set up the environment with \fBcreateEnvironment()\fR, export \f(CW$user\fR, \f(CW$anon\fR,
\&\f(CW$form\fR, \f(CW$constants\fR, \f(CW$slashdb\fR, and \f(CW$gSkin\fR into current namespace.  \f(CW$self\fR
is an alias to \f(CW$slashdb\fR.
.SS "Display(\s-1TEMPLATE\s0 [, \s-1HASHREF, RETURN\s0])"
.IX Subsection "Display(TEMPLATE [, HASHREF, RETURN])"
A wrapper for \fBslashDisplay()\fR.
.PP
Pass in the full name of a template (e.g., \*(L"motd;misc;default\*(R", or just
\&\*(L"motd\*(R" to accept default for page and skin), and an optional \s-1HASHREF\s0
of data.
.PP
Nocomm is true.  Default is to print (else make \s-1RETURN\s0 true).
.PP
If first arg is false, then takes template from \s-1STDIN:\s0 you can type in
your template on the command line, then, and hit ctrl-D or whatever
to end.
.SS "Test(\s-1TEMPLATE\s0 [, \s-1HASHREF\s0])"
.IX Subsection "Test(TEMPLATE [, HASHREF])"
Tests a template.
.PP
Pass in the full name of a template (e.g., \*(L"motd;misc;default\*(R", or just
\&\*(L"motd\*(R" to accept default for page and skin), and an optional \s-1HASHREF\s0
of data.
.PP
No output is produced, only errors.
.PP
If first arg is false, then takes template from \s-1STDIN:\s0 you can type in
your template on the command line, then, and hit ctrl-D or whatever
to end.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSlash\fR\|(3).
