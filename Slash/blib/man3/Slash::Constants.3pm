.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Constants 3"
.TH Constants 3 "2020-06-20" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Slash::Constants \- Constants for Slash
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Slash::Constants \*(Aq:all\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is for a single place to have all of our constants.
Each constant is in one or more export tags.  All of the constants
can be gotten via the \*(L"all\*(R" tag.  None are exported by default.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
The constants below are grouped by tag.
.SS "messages"
.IX Subsection "messages"
These constants are for message delivery modes and message type codes.
.PP
.Vb 4
\&        MSG_MODE_NOCODE
\&        MSG_MODE_NONE
\&        MSG_MODE_EMAIL
\&        MSG_MODE_WEB
.Ve
.PP
.Vb 10
\&        MSG_CODE_REGISTRATION
\&        MSG_CODE_UNKNOWN
\&        MSG_CODE_NEWSLETTER
\&        MSG_CODE_HEADLINES
\&        MSG_CODE_M2
\&        MSG_CODE_COMMENT_MODERATE
\&        MSG_CODE_COMMENT_REPLY
\&        MSG_CODE_JOURNAL_FRIEND
\&        MSG_CODE_NEW_SUBMISSION
\&        MSG_CODE_JOURNAL_REPLY
\&        MSG_CODE_NEW_COMMENT
\&        MSG_CODE_INTERUSER
\&        MSG_CODE_ADMINMAIL
\&        MSG_CODE_EMAILSTORY
\&        MSG_CODE_ZOO_CHANGE
\&        MSG_CODE_BADPASSWORD
\&        MSG_CODE_MODSTATS
\&        MSG_CODE_SUBSCRIPTION_LOW
\&        MSG_CODE_SUBSCRIPTION_OUT
\&        MSG_CODE_SCHEDULECHG
\&        MSG_CODE_HTML_INVALID
.Ve
.PP
.Vb 3
\&        MSG_IUM_ANYONE
\&        MSG_IUM_FRIENDS
\&        MSG_IUM_NOFOES
.Ve
.SS "web"
.IX Subsection "web"
These constants are used for web programs, for the op hashes.
.PP
.Vb 3
\&        ALLOWED
\&        FUNCTION
\&        MINSECLEV
.Ve
.SS "reskey"
.IX Subsection "reskey"
These constants are used for resource keys.
.PP
.Vb 4
\&        RESKEY_NOOP
\&        RESKEY_SUCCESS
\&        RESKEY_FAILURE
\&        RESKEY_DEATH
.Ve
.SS "strip"
.IX Subsection "strip"
These constants are used to define the modes passed to \fBstripByMode()\fR.  Only
user-definable constants (for journals, comments) should be >= 1.  All
else should be < 1.  If adding new user-definable modes, make sure to
change \fBSlash::Data::strip_mode()\fR to allow the new value.
.PP
.Vb 10
\&        NOHTMLURL
\&        ANCHOR
\&        NOTAGS
\&        ATTRIBUTE
\&        LITERAL
\&        NOHTML
\&        PLAINTEXT
\&        HTML
\&        EXTRANS
\&        CODE
\&        TEXTAREA
\&        SUBJECT
\&        TITLE
\&        BACKTRACK
\&        FULLHTML
.Ve
.SS "people"
.IX Subsection "people"
These constants are used to define different constants in the people system.
.PP
.Vb 6
\&        FRIEND
\&        FREAK
\&        FAN
\&        FOE
\&        FOF
\&        EOF
.Ve
.SS "slashd"
.IX Subsection "slashd"
These constants are used to define different constants in the people system.
.PP
.Vb 3
\&        SLASHD_LOG_NEXT_TASK
\&        SLASHD_WAIT
\&        SLASHD_NOWAIT
.Ve
.SH "TODO"
.IX Header "TODO"
Consider allowing some constants, like MSG_CODE_* constants,
be defined dynamically.  Scary, though, with cross-dependencies
in modules, etc.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSlash\fR\|(3).
