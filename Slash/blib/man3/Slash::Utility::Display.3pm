.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Display 3"
.TH Display 3 "2020-06-20" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Slash::Utility::Display \- SHORT DESCRIPTION for Slash
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Slash::Utility;
\&        # do not use this module directly
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1LONG DESCRIPTION.\s0
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "createSelect(\s-1LABEL, DATA\s0 [, \s-1DEFAULT, RETURN, NSORT, ORDERED, MULTIPLE, ONCHANGE\s0])"
.IX Subsection "createSelect(LABEL, DATA [, DEFAULT, RETURN, NSORT, ORDERED, MULTIPLE, ONCHANGE])"
Creates a drop-down list in \s-1HTML.\s0  List is sorted by default
alphabetically according to list values.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1LABEL\s0" 4
.IX Item "LABEL"
.PD
The name/id for the \s-1HTML\s0 entity.
.IP "\s-1DATA\s0" 4
.IX Item "DATA"
A hashref containing key-value pairs for the list.
Keys are list values, and values are list labels.
If an arrayref is passed, it is converted to a
hashref, where the keys and values are the same.
.IP "\s-1DEFAULT\s0" 4
.IX Item "DEFAULT"
Default value for the list.  If \s-1MULTIPLE\s0 is not set,
this should be the key in \s-1DATA\s0 that should start out
selected in the popup.  If \s-1MULTIPLE\s0 is set, this should
be a hashref;  keys which are present and which have
true values will all start out selected in the popup.
.Sp
If \s-1DEFAULT\s0 is a hashref, and no other values follow it,
then it is an options hashref, containing possible values
for the keys \f(CW\*(C`default\*(C'\fR, \f(CW\*(C`return\*(C'\fR, \f(CW\*(C`nsort\*(C'\fR, \f(CW\*(C`ordered\*(C'\fR,
\&\f(CW\*(C`multiple\*(C'\fR, \f(CW\*(C`onchange\*(C'\fR.
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
See \*(L"Return value\*(R" below.
.IP "\s-1NSORT\s0" 4
.IX Item "NSORT"
Boolean: sort numerically, not alphabetically.
.IP "\s-1ORDERED\s0" 4
.IX Item "ORDERED"
If an arrayref is passed, an already-sorted array reference of keys.
If non-ref, then an arrayref of hash keys is created sorting the
hash values, alphabetically and case-insensitively.
If \s-1ORDERED\s0 is passed in either form, then the \s-1NSORT\s0 parameter is ignored.
### Pudge: would the change below be worth making?  All it would do
### is, in the case where \s-1DATA\s0 is passed in as an arrayref and the
### desired behavior is to present the items in that order (which
### would probably be typical for callers that pass in an arrayref),
### \s-1ORDERED\s0 could be passed in as 0 instead of a copy of \s-1DATA.\s0 \-Jamie
#If \s-1ORDERED\s0 is false, and \s-1DATA\s0 is passed in a hashref, then its keys are
#sorted in string order.  If \s-1ORDERED\s0 is false, and \s-1DATA\s0 is passed in an
#arrayref, then the data is presented in that arrayref's order.
.IP "\s-1MULTIPLE\s0" 4
.IX Item "MULTIPLE"
Boolean: do <\s-1SELECT MULTIPLE...\s0> instead of <\s-1SELECT...\s0>
.IP "\s-1ONCHANGE\s0" 4
.IX Item "ONCHANGE"
Value for the \f(CW\*(C`onchange=""\*(C'\fR attribute.
.IP "\s-1ONCLICK\s0" 4
.IX Item "ONCLICK"
Value for the \f(CW\*(C`onclick=""\*(C'\fR attribute.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
If \s-1RETURN\s0 is true, the text of the list is returned.
Otherwise, list is just printed, and returns
true/false if operation is successful.
.Sp
If there are no elements in \s-1DATA,\s0 just returns/prints nothing.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'select' template block.
.SS "selectTopic(\s-1LABEL\s0 [, \s-1DEFAULT, SECTION, RETURN\s0])"
.IX Subsection "selectTopic(LABEL [, DEFAULT, SECTION, RETURN])"
Creates a drop-down list of topics in \s-1HTML.\s0  Calls \f(CW\*(C`createSelect\*(C'\fR.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1LABEL\s0" 4
.IX Item "LABEL"
.PD
The name for the \s-1HTML\s0 entity.
.IP "\s-1DEFAULT\s0" 4
.IX Item "DEFAULT"
Default topic for the list.
.IP "\s-1SECTION\s0" 4
.IX Item "SECTION"
Default section to take topics from.
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
See \*(L"Return value\*(R" below.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
If \s-1RETURN\s0 is true, the text of the list is returned.
Otherwise, list is just printed, and returns
true/false if operation is successful.
.SS "selectSection(\s-1LABEL\s0 [, \s-1DEFAULT, SECT, RETURN, ALL\s0])"
.IX Subsection "selectSection(LABEL [, DEFAULT, SECT, RETURN, ALL])"
Creates a drop-down list of sections in \s-1HTML.\s0  Calls \f(CW\*(C`createSelect\*(C'\fR.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1LABEL\s0" 4
.IX Item "LABEL"
.PD
The name for the \s-1HTML\s0 entity.
.IP "\s-1DEFAULT\s0" 4
.IX Item "DEFAULT"
Default topic for the list.
.IP "\s-1SECT\s0" 4
.IX Item "SECT"
Hashref for current section.
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
See \*(L"Return value\*(R" below.
.IP "\s-1ALL\s0" 4
.IX Item "ALL"
Boolean for including \*(L"All Topics\*(R" item.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
If \s-1RETURN\s0 is true, the text of the list is returned.
Otherwise, list is just printed, and returns
true/false if operation is successful.
.SS "\fBselectSortcode()\fP"
.IX Subsection "selectSortcode()"
Creates a drop-down list of sortcodes in \s-1HTML.\s0  Default is the user's
preference.  Calls \f(CW\*(C`createSelect\*(C'\fR.
.IP "Return value" 4
.IX Item "Return value"
The created list.
.SS "\fBselectMode()\fP"
.IX Subsection "selectMode()"
Creates a drop-down list of modes in \s-1HTML.\s0  Default is the user's
preference.  Calls \f(CW\*(C`createSelect\*(C'\fR.
.IP "Return value" 4
.IX Item "Return value"
The created list.
.SS "selectThreshold(COUNTS[, \s-1OPTIONS\s0])"
.IX Subsection "selectThreshold(COUNTS[, OPTIONS])"
Creates a drop-down list of thresholds in \s-1HTML.\s0  Default is the user's
preference.  Calls \f(CW\*(C`createSelect()\*(C'\fR.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1COUNTS\s0" 4
.IX Item "COUNTS"
.PD
An arrayref of thresholds \-> counts for that threshold.
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
Options for \f(CW\*(C`createSelect()\*(C'\fR.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
The created list.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'selectThreshLabel' template block.
.SS "selectBreakthrough(COUNTS[, \s-1OPTIONS\s0])"
.IX Subsection "selectBreakthrough(COUNTS[, OPTIONS])"
Creates a drop-down list of thresholds in \s-1HTML.\s0  Default is the user's
preference.  Calls \f(CW\*(C`createSelect()\*(C'\fR.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1COUNTS\s0" 4
.IX Item "COUNTS"
.PD
An arrayref of thresholds \-> counts for that threshold.
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
Options for \f(CW\*(C`createSelect()\*(C'\fR.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
The created list.
.SS "linkStory(\s-1STORY\s0)"
.IX Subsection "linkStory(STORY)"
The generic \*(L"Link a Story\*(R" function, used wherever stories need linking.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1STORY\s0" 4
.IX Item "STORY"
.PD
A hashref containing data about a story to be linked to.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
The complete <A \s-1HREF ...\s0></A> text for linking to the story.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'linkStory' template block.
.SS "pollbooth(\s-1QID\s0 [, \s-1NO_TABLE, CENTER\s0])"
.IX Subsection "pollbooth(QID [, NO_TABLE, CENTER])"
Creates a voting pollbooth.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1QID\s0" 4
.IX Item "QID"
.PD
The unique question \s-1ID\s0 for the poll.
.IP "\s-1NO_TABLE\s0" 4
.IX Item "NO_TABLE"
Boolean for whether to leave the poll out of a table.
If false, then will be formatted inside a \f(CW\*(C`fancybox\*(C'\fR.
.IP "\s-1CENTER\s0" 4
.IX Item "CENTER"
Whether or not to center the tabled pollbooth (only
works with \s-1NO_TABLE\s0).
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
Returns the pollbooth data.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'pollbooth' template block.
.SS "\fBcurrentAdminUsers()\fP"
.IX Subsection "currentAdminUsers()"
Displays table of current admin users, with what they are adminning.
.IP "Return value" 4
.IX Item "Return value"
The \s-1HTML\s0 to display.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'currentAdminUsers' template block.
.SS "\fBhorizmenu()\fP"
.IX Subsection "horizmenu()"
Silly little function to create a horizontal menu from the
\&'mainmenu' block.
.IP "Return value" 4
.IX Item "Return value"
The horizontal menu.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'mainmenu' template block.
.SS "titlebar(\s-1WIDTH, TITLE, OPTIONS\s0)"
.IX Subsection "titlebar(WIDTH, TITLE, OPTIONS)"
Prints a titlebar widget.  Exactly equivalent to:
.PP
.Vb 4
\&        slashDisplay(\*(Aqtitlebar\*(Aq, {
\&                width   => $width,
\&                title   => $title
\&        });
.Ve
.PP
or, if template is passed in as an option, e.g. template => user_titlebar:
.PP
.Vb 4
\&        slashDisplay(\*(Aquser_titlebar\*(Aq, {
\&                width   => $width,
\&                title   => $title
\&        });
.Ve
.PP
If you're calling this from a template, you better have a really good
reason, since [% \s-1PROCESS\s0 %] will work just as well.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1WIDTH\s0" 4
.IX Item "WIDTH"
.PD
Width of the titlebar.
.IP "\s-1TITLE\s0" 4
.IX Item "TITLE"
Title of the titlebar.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
None.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'titlebar' template block.
.SS "fancybox(\s-1WIDTH, TITLE, CONTENTS\s0 [, \s-1CENTER, RETURN\s0])"
.IX Subsection "fancybox(WIDTH, TITLE, CONTENTS [, CENTER, RETURN])"
Creates a fancybox widget.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1WIDTH\s0" 4
.IX Item "WIDTH"
.PD
Width of the fancybox.
.IP "\s-1TITLE\s0" 4
.IX Item "TITLE"
Title of the fancybox.
.IP "\s-1CONTENTS\s0" 4
.IX Item "CONTENTS"
Contents of the fancybox.  (I see a pattern here.)
.IP "\s-1CENTER\s0" 4
.IX Item "CENTER"
Boolean for whether or not the fancybox
should be centered.
.IP "\s-1RETURN\s0" 4
.IX Item "RETURN"
Boolean for whether to return or print the
fancybox.
.IP "\s-1CLASS\s0" 4
.IX Item "CLASS"
Value of the \s-1HTML 4.0\s0 and up \s-1CLASS\s0 attribute.
.IP "\s-1ID\s0" 4
.IX Item "ID"
Value of the \s-1HTML 4.0\s0 and up \s-1ID\s0 attribute.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
The fancybox if \s-1RETURN\s0 is true, or true/false
on success/failure.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'fancybox' template block.
.SS "portalbox(\s-1WIDTH, TITLE, CONTENTS, BID\s0 [, \s-1URL\s0])"
.IX Subsection "portalbox(WIDTH, TITLE, CONTENTS, BID [, URL])"
Creates a portalbox widget.  Calls \f(CW\*(C`fancybox\*(C'\fR to process
the box itself.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1WIDTH\s0" 4
.IX Item "WIDTH"
.PD
Width of the portalbox.
.IP "\s-1TITLE\s0" 4
.IX Item "TITLE"
Title of the portalbox.
.IP "\s-1CONTENTS\s0" 4
.IX Item "CONTENTS"
Contents of the portalbox.
.IP "\s-1GETBLOCKS\s0" 4
.IX Item "GETBLOCKS"
If set to 'index' (or blank), adds the down/X/up arrows to the
right hand side of the portalbox title (displayed only on an
index page).
.IP "\s-1BID\s0" 4
.IX Item "BID"
The block \s-1ID\s0 for the portal in question.
.IP "\s-1URL\s0" 4
.IX Item "URL"
\&\s-1URL\s0 to link the title of the portalbox to.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
The portalbox.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'fancybox', 'portalboxtitle', and
\&'portalmap' template blocks.
.SS "linkCommentPages(\s-1SID, PID, CID, TOTAL\s0)"
.IX Subsection "linkCommentPages(SID, PID, CID, TOTAL)"
Print links to pages for additional comments.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1SID\s0" 4
.IX Item "SID"
.PD
Story \s-1ID.\s0
.IP "\s-1PID\s0" 4
.IX Item "PID"
Parent \s-1ID.\s0
.IP "\s-1CID\s0" 4
.IX Item "CID"
Comment \s-1ID.\s0
.IP "\s-1TOTAL\s0" 4
.IX Item "TOTAL"
Total number of comments.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
Links.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'linkCommentPages' template block.
.SS "linkComment(\s-1COMMENT\s0 [, \s-1PRINTCOMMENT, DATE\s0])"
.IX Subsection "linkComment(COMMENT [, PRINTCOMMENT, DATE])"
Print a link to a comment.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1COMMENT\s0" 4
.IX Item "COMMENT"
.PD
A hashref containing data about the comment.
.IP "\s-1PRINTCOMMENT\s0" 4
.IX Item "PRINTCOMMENT"
Boolean for whether to create link directly
to comment, instead of to the story for that comment.
.IP "\s-1DATE\s0" 4
.IX Item "DATE"
Boolean for whather to print date with link.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
Link for comment.
.IP "Dependencies" 4
.IX Item "Dependencies"
The 'linkComment' template block.
.SS "createMenu(\s-1MENU\s0)"
.IX Subsection "createMenu(MENU)"
Creates a menu.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1MENU\s0" 4
.IX Item "MENU"
.PD
The name of the menu to get.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
The menu.
.IP "Dependencies" 4
.IX Item "Dependencies"
The template blocks 'admin', 'user' (in the 'menu' page), and any other
template blocks for menus, along with all the data in the
\&'menus' table.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSlash\fR\|(3), \fBSlash::Utility\fR\|(3).
