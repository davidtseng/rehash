.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Access 3"
.TH Access 3 "2020-06-20" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Slash::Utility::Access \- SHORT DESCRIPTION for Slash
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Slash::Utility;
\&        # do not use this module directly
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1LONG DESCRIPTION.\s0
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "\fBgetFormkey()\fP"
.IX Subsection "getFormkey()"
Creates a random formkey (well, as random as random gets)
.IP "Return value" 4
.IX Item "Return value"
Return a random value based on alphanumeric characters
.SS "\fBformkeyError()\fP"
.IX Subsection "formkeyError()"
generates proper error message based on formkey error and 
also logs to abuse log if the error warrants it
.IP "Return value" 4
.IX Item "Return value"
Returns an error message to be printed out by calling script
.SS "\fBallowExpiry()\fP"
.IX Subsection "allowExpiry()"
Returns whether the system allows user expirations or not.
.IP "Return value" 4
.IX Item "Return value"
Boolean value. True if users are to be expired, false if not.
.Sp
The following variables can control this behavior:
	min_expiry_days
	max_expiry_days
	min_expiry_comm
	max_expiry_comm
.Sp
.Vb 1
\&        do_expiry
.Ve
.ie n .SS "setUserExpiry($uid, $val)"
.el .SS "setUserExpiry($uid, \f(CW$val\fP)"
.IX Subsection "setUserExpiry($uid, $val)"
Set/Clears the expired status on the given \s-1UID\s0 based on \f(CW$val\fR. If \f(CW$val\fR
is non-zero, then expiration will be performed on the user, this
include:
	\- Generating a registration \s-1ID\s0 for the user so that they can re-register.
	\- Marking all forms in vars.[expire_forms] as read-only.
	\- Clearing the registration flag.
	\- Sending the registration email which notifies user of expiration.
.PP
If \f(CW$val\fR is non-zero, then the above operations are \*(L"cleared\*(R" by
performing the following:
.PP
.Vb 4
\&        \- Clearing the registration ID associated with the user.
\&          (it\*(Aqs not the job of this routine to perform checks on reg\-id)
\&        \- Unmarking all forms marked read\-only (note: this is NOT a deletion!)
\&        \- Setting the registration flag.
.Ve
.IP "Return value" 4
.IX Item "Return value"
None.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSlash\fR\|(3), \fBSlash::Utility\fR\|(3).
