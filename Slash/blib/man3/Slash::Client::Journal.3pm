.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Slash::Client::Journal 3"
.TH Slash::Client::Journal 3 "2020-06-20" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Slash::Client::Journal \- Write journal clients for Slash
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        my $client = Slash::Client::Journal\->new({
\&                host => \*(Aquse.perl.org\*(Aq,
\&        });
\&        my $entry = $client\->get_entry(10_000);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Slash::Client::Journal provides an \s-1API\s0 for writing clients for Slash journals.
.PP
See Slash::Client for details on authentication and for more information.
.SS "Methods"
.IX Subsection "Methods"
.IP "add_entry(\s-1HASHREF\s0)" 4
.IX Item "add_entry(HASHREF)"
Add an entry.  Must be authenticated.
.Sp
Pass key-value pairs for \f(CW\*(C`subject\*(C'\fR and \f(CW\*(C`body\*(C'\fR (both required).  Other optional
keys are \f(CW\*(C`discuss\*(C'\fR, \f(CW\*(C`posttype\*(C'\fR, and \f(CW\*(C`tid\*(C'\fR.
.Sp
\&\f(CW\*(C`discuss\*(C'\fR is a boolean for turning on discussions.  If false, comments
are not turned on.  If true, the user's prefs on the site are used (which
is also the default).
.Sp
\&\f(CW\*(C`posttype\*(C'\fR is an integer defining the post types.  This is subject to change,
but is currently: 1 = Plain Old Text, 2 = \s-1HTML\s0 Formatted,
3 = Extrans (html tags to text), 4 = Code.  Again, default is to simply use
the user's preferences.
.Sp
\&\f(CW\*(C`tid\*(C'\fR is a topic \s-1ID.\s0  This varies widely between Slash sites.  To get a list,
view the source of the journal editing page and look for the \*(L"tid\*(R" form values.
.Sp
In scalar context, returns the unique \s-1ID\s0 of the new entry, or false if failure.
.Sp
In list context, on success, returns the \s-1URL\s0 to the new journal entry as
the second list element.
.IP "modify_entry(\s-1ID, HASHREF\s0)" 4
.IX Item "modify_entry(ID, HASHREF)"
Modify an existing entry.  Must be authenticated.
.Sp
Parameters are just like \f(CW\*(C`add_entry\*(C'\fR.  (Note: \f(CW\*(C`discuss\*(C'\fR cannot be modified
if a discussion had already been created for the entry.)
.Sp
In scalar context, returns the unique \s-1ID\s0 of the modified entry, or false if
failure.
.Sp
In list context, on success, returns the \s-1URL\s0 to the modified journal entry as
the second list element.
.IP "delete_entry(\s-1ID\s0)" 4
.IX Item "delete_entry(ID)"
Deletes an existing entry.  Must be authenticated.
.Sp
Returns true on success, false on error.
.IP "get_entries(\s-1UID\s0 [, \s-1LIMIT\s0])" 4
.IX Item "get_entries(UID [, LIMIT])"
Gets the entries for a given user.  If \s-1LIMIT\s0 is not supplied, a site-defined
\&\s-1LIMIT\s0 is used.
.Sp
Returns an arrayref of hashrefs, where each hashref is an entry, with the keys
being the entry's id, \s-1URL,\s0 and subject.
.Sp
Returns false on error.
.IP "get_entry(\s-1ID\s0)" 4
.IX Item "get_entry(ID)"
Get an entry.  Returns lots of information about the entry, including uid,
nickname, date, subject, discussion \s-1ID,\s0 tid, body, \s-1URL,\s0 id, posttype,
and discussion \s-1URL.\s0
.Sp
Returns false on error.
.SH "TODO"
.IX Header "TODO"
Work on error handling.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSlash::Client\fR\|(3).
