.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plugin 3"
.TH Plugin 3 "2020-06-20" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Slash::Display::Plugin \- Template Toolkit plugin for Slash
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        [% Slash.someFunction(\*(Aqsome data\*(Aq) %]
\&        [% Slash.db.someMethod(var1, var2) %]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Call available exported functions from Slash and Slash::Utility
from within your template.  Also call methods from Slash::DB
with the \f(CW\*(C`db\*(C'\fR method.  Constants from Slash::Constants are
available.
.PP
\&\f(CW\*(C`[% Slash.version %]\*(C'\fR gives the version of Slash.
\&\f(CW\*(C`[% Slash.VERSION %]\*(C'\fR (note case) gives the version
of this Slash Template plugin.
.PP
\&\f(CW\*(C`[% Slash.Display %]\*(C'\fR provides access to \f(CW\*(C`slashDisplay()\*(C'\fR.  Use
this \fBsparingly\fR, only when you need to pass in certain options
(such as setting Skin or Page).  In the general case, use
\&\f(CW\*(C`PROCESS\*(C'\fR in the template, or \f(CW\*(C`INCLUDE\*(C'\fR if necessary.
This method will always set \f(CW\*(C`Return\*(C'\fR, so you may assign its
result to a variable, or call it by itself to have its result
outputted normally.
.SS "Implementation Notes"
.IX Subsection "Implementation Notes"
The \f(CW\*(C`db\*(C'\fR method merely returns the object returned by \f(CW\*(C`getCurrentDB\*(C'\fR,
and then any Slash::DB method may be called on that object.
.PP
The \s-1API\s0 for Slash and Slash::Utility is provided by populating
a hash of \f(CW\*(C`functionname => coderef\*(C'\fR for each function in
the \f(CW@EXPORT\fR array, and then doing a lookup in \f(CW\*(C`AUTOLOAD\*(C'\fR.
Slash::Constants is similar, except it uses the \f(CW@EXPORT_OK\fR
array.  \f(CW\*(C`AUTOLOAD\*(C'\fR will therefore catch all method calls (except
for a few predefined ones) and will warn if it can't be found.
.PP
For all of these, and for the \f(CW\*(C`Display\*(C'\fR plugin method,
the current Template context is stored in a global variable,
which \f(CW\*(C`slashDisplay\*(C'\fR uses, if invoked.  The problem is
that Template will sort of clear itself out if we let it
create a new template object in this case, so we pass along
the current one to be used.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBTemplate\fR\|(3), \fBSlash\fR\|(3), \fBSlash::Utility\fR\|(3), \fBSlash::Display\fR\|(3).
