.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML 3"
.TH XML 3 "2020-06-20" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Slash::XML \- Perl extension for Slash
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Slash::XML;
\&        xmlDisplay(%data);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Slash::XML aids in creating \s-1XML.\s0  Right now, only \s-1RSS\s0 is supported.
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "xmlDisplay(\s-1TYPE, PARAM\s0 [, \s-1OPTIONS\s0])"
.IX Subsection "xmlDisplay(TYPE, PARAM [, OPTIONS])"
Creates \s-1XML\s0 data.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1TYPE\s0" 4
.IX Item "TYPE"
.PD
The \s-1XML\s0 type, which determines which \s-1XML\s0 creation routine to call.
Right now, supports only \*(L"rss\*(R" which calls \fBXML::RSS::create()\fR.
.IP "\s-1PARAM\s0" 4
.IX Item "PARAM"
A hashref of parameters to pass to the \s-1XML\s0 creation routine.
.IP "\s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
Hashref of options.  Currently supported options are below.
If \s-1OPTIONS\s0 is the value \f(CW1\fR instead of a hashref, that will
be the same as if the hashref were \f(CW\*(C`{ Return => 1 }\*(C'\fR.
.RS 4
.IP "Return" 4
.IX Item "Return"
Boolean for whether to print (false) or return (true) the
processed template data.  Default is to print output via
Apache, with full \s-1HTML\s0 headers.
.IP "filename" 4
.IX Item "filename"
A name for the generated filename Apache sends out.  \*(L"Unsafe\*(R"
chars are replaced, and \*(L".xml\*(R" is appended if there is no \*(L".\*(R"
in the name already.  \*(L"foo bar\*(R" becomes \*(L"foo_bar.xml\*(R" and
\&\*(L"foo bar.rss\*(R" becomes \*(L"foo_bar.rss\*(R".
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
If \s-1OPTIONS\-\s0>{Return} is true, the \s-1XML\s0 data.
Otherwise, returns true/false for success/failure.
.SS "date2iso8601([\s-1TIME, Z\s0])"
.IX Subsection "date2iso8601([TIME, Z])"
Return a standard \s-1ISO 8601\s0 time string.
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1TIME\s0" 4
.IX Item "TIME"
.PD
Some sort of string in \s-1GMT\s0 that can be parsed by Date::Parse.
If no \s-1TIME\s0 given, uses current time.
.IP "Z" 4
.IX Item "Z"
By default, strings of the form \*(L"2005\-04\-18T22:38:55+00:00\*(R" are returned,
where the \*(L"+00:00\*(R" denotes the time zone differential.  If Z is true, the
alternate form \*(L"2005\-04\-18T22:38:55Z\*(R" will be used, where the string is
forced into \s-1UTC\s0 and \*(L"Z\*(R" is used to denote the fact.
.Sp
Both forms should be acceptable, but some applications may require one
or the other.
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
The time string.
.SS "encode(\s-1VALUE\s0 [, \s-1KEY\s0])"
.IX Subsection "encode(VALUE [, KEY])"
Encodes the data to put it into the \s-1XML.\s0  Normally will encode
assuming the parsed data will be printed in \s-1HTML.\s0  See \s-1KEY.\s0
.IP "Parameters" 4
.IX Item "Parameters"
.RS 4
.PD 0
.IP "\s-1VALUE\s0" 4
.IX Item "VALUE"
.PD
Value to be encoded.
.IP "\s-1KEY\s0" 4
.IX Item "KEY"
If \s-1KEY\s0 is \*(L"link\*(R", then data will be encoded so as \s-1NOT\s0 to assume
the parsed data will be printed in \s-1HTML.\s0
.RE
.RS 4
.RE
.IP "Return value" 4
.IX Item "Return value"
The encoded data.
.IP "Dependencies" 4
.IX Item "Dependencies"
See \fBxmlencode()\fR and \fBxmlencode_plain()\fR in Slash::Utility.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSlash\fR\|(3), \fBSlash::Utility\fR\|(3), \fBXML::Parser\fR\|(3), \s-1\fBXML::RSS\s0\fR\|(3).
